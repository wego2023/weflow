// Code generated by hertz generator.

package main

import (
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/swagger"
	swaggerFiles "github.com/swaggo/files"
	config "github.com/wegoteam/weflow/internal/config"
	_ "github.com/wegoteam/weflow/internal/docs"
	"github.com/wegoteam/weflow/internal/router"
	"gopkg.in/natefinch/lumberjack.v2"
)

// @title weflow
// @version 1.0
// @description weflow swagger api documention.

// @contact.name hertz-contrib
// @contact.url https://github.com/hertz-contrib

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @schemes http
func main() {
	// init dal
	// dal.Init()
	address := config.GetConf().Hertz.Address
	h := server.New(server.WithHostPorts(address))
	// do what you wanted
	// add some render data: <no value>
	swaggerURL := swagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition
	h.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, swaggerURL, swagger.DefaultModelsExpandDepth(-1)))

	router.GeneratedRegister(h)
	registerMiddleware(h)

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// pprof
	if config.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}
	// gzip
	if config.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if config.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(config.LogLevel())
	hlog.SetOutput(&lumberjack.Logger{
		Filename:   config.GetConf().Hertz.LogFileName,
		MaxSize:    config.GetConf().Hertz.LogMaxSize,
		MaxBackups: config.GetConf().Hertz.LogMaxBackups,
		MaxAge:     config.GetConf().Hertz.LogMaxAge,
	})

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())
}
